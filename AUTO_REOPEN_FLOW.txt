╔══════════════════════════════════════════════════════════════════════════════╗
║                   AUTO-REOPEN TASK PANE - FLOW DIAGRAM                       ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                          SCENARIO: User Closes Pane                          │
└─────────────────────────────────────────────────────────────────────────────┘

   User clicks X on Task Pane
            │
            ▼
   ┌─────────────────────┐
   │ VisibleChanged      │  (Event handler in ThisAddIn.cs:59)
   │ Event Fired         │
   └──────────┬──────────┘
              │
              ▼
   ┌─────────────────────┐
   │ Add window to       │  userClosedTaskPanes.Add(window)
   │ userClosedTaskPanes │
   └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                  SCENARIO: User Starts Typing Dictionary Word                │
└─────────────────────────────────────────────────────────────────────────────┘

   User types "acc"
         │
         ▼
   ┌─────────────────────┐
   │  typingTimer_Tick   │  (Every 300ms - line 1846)
   │  Fires              │
   └──────────┬──────────┘
              │
              ▼
   ┌─────────────────────┐
   │ Restart             │  debounceTimer.Stop() then Start()
   │ debounceTimer       │  (Line 1851-1852)
   └──────────┬──────────┘
              │
              │ Wait 300ms...
              ▼
   ┌─────────────────────┐
   │ DebounceTimer_Tick  │  (Line 1858)
   │ Executes            │
   └──────────┬──────────┘
              │
              ▼
   ┌─────────────────────┐
   │ Get current window  │  var window = Application.ActiveWindow
   │ and control         │  (Line 1865-1879)
   └──────────┬──────────┘
              │
              ▼
   ┌─────────────────────────────────────────┐
   │ Get last typed words (up to 12 words)   │  (Line 1895-1921)
   │ Example: "acc" or "accounting manager"  │
   └──────────┬──────────────────────────────┘
              │
              ▼
   ┌─────────────────────┐
   │ Search Trie for     │  trie.GetWordsWithPrefix("acc")
   │ matching phrases    │  (Line 1949-1951)
   └──────────┬──────────┘
              │
              ├─── No matches found ──────┐
              │                            │
              ▼                            ▼
   ┌─────────────────────┐    ┌─────────────────────┐
   │ Matches found!      │    │ wordsChecked++      │
   │ matches.Count > 0   │    │ Continue loop       │
   └──────────┬──────────┘    │ (Line 1954-1957)    │
              │                └─────────────────────┘
              ▼                         │
   ┌─────────────────────┐              │
   │ Is task pane hidden?│              │ Return to searching
   │ (Line 1961-1963)    │              │ next word...
   └──────────┬──────────┘              │
              │                         │
         YES  │  NO                     │
    ┌─────────┴────────┐                │
    ▼                  ▼                │
┌───────────────┐  ┌──────────────────┐ │
│ 🔑 KEY CHANGE:│  │ Pane already     │ │
│ taskPane      │  │ visible, just    │ │
│ .Visible=true │  │ update content   │ │
│               │  └──────────────────┘ │
│ (Line 1965)   │                       │
└───────┬───────┘                       │
        │                               │
        ▼                               │
┌───────────────────┐                   │
│ Remove from       │                   │
│ userClosedTaskPanes│                  │
│ (Line 1967)       │                   │
└───────┬───────────┘                   │
        │                               │
        └───────────┬───────────────────┘
                    │
                    ▼
        ┌───────────────────────┐
        │ Show suggestions in   │  currentControl.ShowSuggestions()
        │ task pane             │  (Line 1972-1974)
        └───────────────────────┘
                    │
                    ▼
        ╔═══════════════════════╗
        ║ ✅ TASK PANE REOPENS! ║
        ║ User sees suggestions ║
        ╚═══════════════════════╝


┌─────────────────────────────────────────────────────────────────────────────┐
│                         DATA STRUCTURES INVOLVED                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────┐
│ taskPanes                                                                 │
│ Dictionary<Word.Window, CustomTaskPane>                                  │
├──────────────────────────────────────────────────────────────────────────┤
│ Purpose: Stores one task pane per Word window                           │
│ Example:                                                                 │
│   [Document1.Window] → CustomTaskPane #1                                │
│   [Document2.Window] → CustomTaskPane #2                                │
└──────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────┐
│ userClosedTaskPanes                                                       │
│ HashSet<Word.Window>                                                      │
├──────────────────────────────────────────────────────────────────────────┤
│ Purpose: Tracks which windows user manually closed pane                 │
│ Example:                                                                 │
│   Before user types: [Document1.Window] ← User closed it                │
│   After matches found: [] ← Removed, allowing reopen                    │
└──────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────┐
│ trie (Trie data structure)                                               │
│ Root → Children[char] → Children[char] → ... → Words[]                   │
├──────────────────────────────────────────────────────────────────────────┤
│ Purpose: Fast O(m) prefix lookup for typed text                         │
│ Example:                                                                 │
│   Input: "acc"                                                           │
│   Trie lookup:                                                           │
│     Root → 'a' → 'c' → 'c' → Words = ["accounting", "accounting manager",│
│                                        "account", "accountant"]          │
└──────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────┐
│ abbreviationDict (in AbbreviationManager)                                │
│ Dictionary<string, string>                                               │
├──────────────────────────────────────────────────────────────────────────┤
│ Purpose: Maps phrases to their abbreviations                            │
│ Example:                                                                 │
│   ["accounting manager"] → "Acct Mgr"                                   │
│   ["chief of army staff"] → "COAS"                                      │
│   ["government of india"] → "GoI"                                       │
└──────────────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                           TIMING DIAGRAM                                     │
└─────────────────────────────────────────────────────────────────────────────┘

Time (ms)    Event
─────────    ─────────────────────────────────────────────────────────────
   0         User types 'a'
 300         typingTimer_Tick → restart debounceTimer
 300         User types 'c'
 600         typingTimer_Tick → restart debounceTimer (reset!)
 600         User types 'c'
 900         typingTimer_Tick → restart debounceTimer (reset again!)
1200         debounceTimer_Tick fires (300ms after last keystroke)
1200         ➔ Lookup "acc" in Trie
1200         ➔ Find matches: ["accounting", "accounting manager", ...]
1200         ➔ Check if pane is hidden
1200         ➔ Set taskPane.Visible = true  ← 🔑 KEY CHANGE
1200         ➔ Remove from userClosedTaskPanes
1200         ➔ Display suggestions
1200         ✅ PANE REOPENS!


┌─────────────────────────────────────────────────────────────────────────────┐
│                         COMPARISON: OLD vs NEW                               │
└─────────────────────────────────────────────────────────────────────────────┘

OLD BEHAVIOR (Before Changes)
────────────────────────────────────────────────────────────────────────────
   User closes pane → Added to userClosedTaskPanes
              │
              ▼
   User types dictionary word → Check userClosedTaskPanes
              │
              ▼
   if (userClosedTaskPanes.Contains(window))  ← LINE 1888 (OLD)
              │
              ▼
         return;  ❌ STOP! Don't show anything
              │
              ▼
   Pane stays closed forever (until user clicks "Show Suggestions" button)


NEW BEHAVIOR (After Changes)
────────────────────────────────────────────────────────────────────────────
   User closes pane → Added to userClosedTaskPanes
              │
              ▼
   User types dictionary word → Search for matches
              │
              ▼
   if (matches.Count > 0)  ← LINE 1954 (NEW)
              │
              ▼
   if (!taskPane.Visible)  ← LINE 1963 (NEW)
              │
              ▼
   taskPane.Visible = true;  ← LINE 1965 (NEW) ✅ REOPEN!
              │
              ▼
   userClosedTaskPanes.Remove(window);  ← LINE 1967 (NEW)
              │
              ▼
   Show suggestions ✅ Pane reopens automatically!


┌─────────────────────────────────────────────────────────────────────────────┐
│                     WHY THIS DESIGN IS SMART                                 │
└─────────────────────────────────────────────────────────────────────────────┘

1. CONTEXT-AWARE
   ─────────────
   • System understands user intent based on what they're typing
   • If typing random text → respects closed state
   • If typing dictionary word → provides helpful suggestions

2. NON-INTRUSIVE
   ──────────────
   • Doesn't force pane to stay open all the time
   • Only appears when actually useful
   • User can still disable via ribbon if they never want it

3. ZERO MANUAL INTERVENTION
   ─────────────────────────
   • User doesn't need to remember to click "Show Suggestions"
   • Seamless workflow - just start typing!
   • Feels like intelligent autocomplete

4. PER-WINDOW MEMORY
   ──────────────────
   • Each Word window has independent state
   • Closing pane in Document1 doesn't affect Document2
   • Sophisticated multi-window support

5. PERFORMANCE OPTIMIZED
   ──────────────────────
   • Uses Trie for O(m) lookup (m = length of typed text)
   • Debouncing prevents excessive checks
   • Only searches when user pauses typing (300ms delay)


═══════════════════════════════════════════════════════════════════════════════
                              END OF FLOW DIAGRAM
═══════════════════════════════════════════════════════════════════════════════
